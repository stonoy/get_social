// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package internal

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users(id, created_at, updated_at, name, email, password, location, age, role, username, bio)
values($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
returning id, created_at, updated_at, name, email, password, location, age, username, bio, role
`

type CreateUserParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Email     string
	Password  string
	Location  string
	Age       int32
	Role      UserType
	Username  string
	Bio       string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Location,
		arg.Age,
		arg.Role,
		arg.Username,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Location,
		&i.Age,
		&i.Username,
		&i.Bio,
		&i.Role,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, created_at, updated_at, name, email, password, location, age, username, bio, role from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Location,
		&i.Age,
		&i.Username,
		&i.Bio,
		&i.Role,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, created_at, updated_at, name, email, password, location, age, username, bio, role from users where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Location,
		&i.Age,
		&i.Username,
		&i.Bio,
		&i.Role,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, created_at, updated_at, name, email, password, location, age, username, bio, role from users
where (name like $1) and (location like $2)
`

type GetUsersParams struct {
	Name     string
	Location string
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Name, arg.Location)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Location,
			&i.Age,
			&i.Username,
			&i.Bio,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isAdmin = `-- name: IsAdmin :one
select
case
    when count(*) = 0 then true
    else false
end as user_count
from users
`

func (q *Queries) IsAdmin(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, isAdmin)
	var user_count bool
	err := row.Scan(&user_count)
	return user_count, err
}

const updateUserDetails = `-- name: UpdateUserDetails :one
update users
set updated_at = NOW(),
name = $1,
location = $2,
age = $3,
username = $4,
bio = $5
where id = $6
returning id, created_at, updated_at, name, email, password, location, age, username, bio, role
`

type UpdateUserDetailsParams struct {
	Name     string
	Location string
	Age      int32
	Username string
	Bio      string
	ID       uuid.UUID
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserDetails,
		arg.Name,
		arg.Location,
		arg.Age,
		arg.Username,
		arg.Bio,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Location,
		&i.Age,
		&i.Username,
		&i.Bio,
		&i.Role,
	)
	return i, err
}
