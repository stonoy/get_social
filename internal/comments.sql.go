// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comments.sql

package internal

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
insert into comments(id, created_at, updated_at, comment, postid, userid)
values ($1, $2, $3, $4, $5, $6)
returning id, created_at, updated_at, comment, userid, postid
`

type CreateCommentParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Comment   string
	Postid    uuid.UUID
	Userid    uuid.UUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Comment,
		arg.Postid,
		arg.Userid,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comment,
		&i.Userid,
		&i.Postid,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
delete from comments where id = $1 and userid = $2
returning id, created_at, updated_at, comment, userid, postid
`

type DeleteCommentParams struct {
	ID     uuid.UUID
	Userid uuid.UUID
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, deleteComment, arg.ID, arg.Userid)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comment,
		&i.Userid,
		&i.Postid,
	)
	return i, err
}

const getCommentsPost = `-- name: GetCommentsPost :many
select comments.id,comments.comment,comments.postid,users.id,users.name
from comments
inner join users
on comments.userid = users.id
where comments.postid = $1
order by comments.created_at
`

type GetCommentsPostRow struct {
	ID      uuid.UUID
	Comment string
	Postid  uuid.UUID
	ID_2    uuid.UUID
	Name    string
}

func (q *Queries) GetCommentsPost(ctx context.Context, postid uuid.UUID) ([]GetCommentsPostRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsPost, postid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsPostRow
	for rows.Next() {
		var i GetCommentsPostRow
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.Postid,
			&i.ID_2,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
update comments
set updated_at = NOW(),
comment = $1
where id = $2 and userid = $3
returning id, created_at, updated_at, comment, userid, postid
`

type UpdateCommentParams struct {
	Comment string
	ID      uuid.UUID
	Userid  uuid.UUID
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.Comment, arg.ID, arg.Userid)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comment,
		&i.Userid,
		&i.Postid,
	)
	return i, err
}
