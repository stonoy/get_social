// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: likes.sql

package internal

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getNumLikesPost = `-- name: GetNumLikesPost :one
select count(*) from likes where postid = $1
`

func (q *Queries) GetNumLikesPost(ctx context.Context, postid uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumLikesPost, postid)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const likeAPost = `-- name: LikeAPost :one
insert into likes(id , created_at, updated_at, postid, userid)
values ($1, $2, $3, $4, $5)
returning id, created_at, updated_at, userid, postid
`

type LikeAPostParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Postid    uuid.UUID
	Userid    uuid.UUID
}

func (q *Queries) LikeAPost(ctx context.Context, arg LikeAPostParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, likeAPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Postid,
		arg.Userid,
	)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Postid,
	)
	return i, err
}

const removeLike = `-- name: RemoveLike :one
delete from likes where postid = $1 and userid = $2
returning id, created_at, updated_at, userid, postid
`

type RemoveLikeParams struct {
	Postid uuid.UUID
	Userid uuid.UUID
}

func (q *Queries) RemoveLike(ctx context.Context, arg RemoveLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, removeLike, arg.Postid, arg.Userid)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Postid,
	)
	return i, err
}
