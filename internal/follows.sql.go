// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: follows.sql

package internal

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const follow = `-- name: Follow :one
insert into follows(id, created_at, updated_at, person, follower)
values ($1, $2, $3, $4, $5)
returning id, created_at, updated_at, person, follower
`

type FollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Person    uuid.UUID
	Follower  uuid.UUID
}

func (q *Queries) Follow(ctx context.Context, arg FollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, follow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Person,
		arg.Follower,
	)
	var i Follow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Person,
		&i.Follower,
	)
	return i, err
}

const followSuggestions = `-- name: FollowSuggestions :many
select users.id, users.name, count(follows.*) as followers
from follows
inner join users
on follows.person = users.id
where follows.follower != $1
group by users.id
limit 3
`

type FollowSuggestionsRow struct {
	ID        uuid.UUID
	Name      string
	Followers int64
}

func (q *Queries) FollowSuggestions(ctx context.Context, follower uuid.UUID) ([]FollowSuggestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, followSuggestions, follower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FollowSuggestionsRow
	for rows.Next() {
		var i FollowSuggestionsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Followers); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const myFollowers = `-- name: MyFollowers :many
select users.id, users.name 
from follows
inner join users
on follows.follower = users.id
where person = $1
`

type MyFollowersRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) MyFollowers(ctx context.Context, person uuid.UUID) ([]MyFollowersRow, error) {
	rows, err := q.db.QueryContext(ctx, myFollowers, person)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MyFollowersRow
	for rows.Next() {
		var i MyFollowersRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const personsIFollow = `-- name: PersonsIFollow :many
select users.id, users.name 
from follows
inner join users
on follows.person = users.id
where follower = $1
`

type PersonsIFollowRow struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) PersonsIFollow(ctx context.Context, follower uuid.UUID) ([]PersonsIFollowRow, error) {
	rows, err := q.db.QueryContext(ctx, personsIFollow, follower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PersonsIFollowRow
	for rows.Next() {
		var i PersonsIFollowRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollow = `-- name: Unfollow :one
delete from follows where person = $1 and follower = $2
returning id, created_at, updated_at, person, follower
`

type UnfollowParams struct {
	Person   uuid.UUID
	Follower uuid.UUID
}

func (q *Queries) Unfollow(ctx context.Context, arg UnfollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, unfollow, arg.Person, arg.Follower)
	var i Follow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Person,
		&i.Follower,
	)
	return i, err
}
